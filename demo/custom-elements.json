{
  "version": 2,
  "tags": [
    {
      "name": "expansion-panel",
      "description": "A custom element similar to the HTML5 `<details>` element.",
      "jsDoc": "/**\n * A custom element similar to the HTML5 `<details>` element.\n *\n * @element expansion-panel\n *\n * @slot - Slot fot panel content\n * @slot header - Slot for panel header\n *\n * @attr {Boolean} focused - State attribute set when element has focus.\n * @attr {Boolean} focus-ring - State attribute set when focused from keyboard.\n *\n * @cssprop --panel-header-background - Default panel header background color.\n * @cssprop --panel-header-min-height - Panel header minimum height.\n * @cssprop --panel-ripple-background - Active toggle button ripple background.\n *\n * @csspart header - An element wrapping the `header` slot.\n * @csspart toggle - A toggle button, child of the header part.\n * @csspart content - An element wrapping the `content` slot.\n *\n * @fires opened-changed - Event fired when expanding / collapsing\n */",
      "attributes": [
        {
          "name": "focused",
          "description": "State attribute set when element has focus.",
          "type": "boolean"
        },
        {
          "name": "focus-ring",
          "description": "State attribute set when focused from keyboard.",
          "type": "boolean"
        },
        {
          "name": "opened",
          "description": "When true, the panel content is expanded and visible",
          "jsDoc": "/**\n   * When true, the panel content is expanded and visible\n   */",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "Disabled panel can not be expanded or collapsed",
          "jsDoc": "/**\n   * Disabled panel can not be expanded or collapsed\n   */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "opened",
          "description": "When true, the panel content is expanded and visible",
          "jsDoc": "/**\n   * When true, the panel content is expanded and visible\n   */",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "Disabled panel can not be expanded or collapsed",
          "jsDoc": "/**\n   * Disabled panel can not be expanded or collapsed\n   */",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "opened-changed",
          "description": "Event fired when expanding / collapsing"
        }
      ],
      "slots": [
        {
          "name": "header",
          "description": "Slot for panel header"
        },
        {
          "name": "",
          "description": "Slot fot panel content"
        }
      ],
      "cssProperties": [
        {
          "name": "--panel-ripple-background",
          "description": "Active toggle button ripple background."
        },
        {
          "name": "--panel-header-min-height",
          "description": "Panel header minimum height."
        },
        {
          "name": "--panel-header-background",
          "description": "Default panel header background color."
        }
      ],
      "cssParts": [
        {
          "name": "content",
          "description": "An element wrapping the `content` slot."
        },
        {
          "name": "toggle",
          "description": "A toggle button, child of the header part."
        },
        {
          "name": "header",
          "description": "An element wrapping the `header` slot."
        }
      ]
    },
    {
      "name": "fancy-accordion",
      "description": "A custom element implementing the accordion widget: a vertically stacked set of expandable panels\nthat wraps several instances of the `<expansion-panel>` element. Only one panel can be opened\n(expanded) at a time.\n\nPanel headings function as controls that enable users to open (expand) or hide (collapse) their\nassociated sections of content. The user can toggle panels by mouse click, Enter and Space keys.\n\nThe component supports keyboard navigation and is aligned with the\n[WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion).",
      "jsDoc": "/**\n * A custom element implementing the accordion widget: a vertically stacked set of expandable panels\n * that wraps several instances of the `<expansion-panel>` element. Only one panel can be opened\n * (expanded) at a time.\n *\n * Panel headings function as controls that enable users to open (expand) or hide (collapse) their\n * associated sections of content. The user can toggle panels by mouse click, Enter and Space keys.\n *\n * The component supports keyboard navigation and is aligned with the\n * [WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion).\n *\n * @element fancy-accordion\n *\n * @slot - Slot fot panel elements.\n *\n * @fires opened-changed - Event fired when expanding / collapsing\n */",
      "attributes": [
        {
          "name": "opened",
          "description": "Index of the currently opened panel. First panel is opened by\ndefault. Only one panel can be opened at the same time.\nSetting `undefined` closes all the accordion panels.",
          "jsDoc": "/**\n   * Index of the currently opened panel. First panel is opened by\n   * default. Only one panel can be opened at the same time.\n   * Setting `undefined` closes all the accordion panels.\n   */",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "opened",
          "description": "Index of the currently opened panel. First panel is opened by\ndefault. Only one panel can be opened at the same time.\nSetting `undefined` closes all the accordion panels.",
          "jsDoc": "/**\n   * Index of the currently opened panel. First panel is opened by\n   * default. Only one panel can be opened at the same time.\n   * Setting `undefined` closes all the accordion panels.\n   */",
          "type": "number | undefined"
        }
      ],
      "events": [
        {
          "name": "opened-changed",
          "description": "Event fired when expanding / collapsing"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Slot fot panel elements."
        }
      ]
    },
    {
      "name": "progress-bar",
      "description": "A custom element similar to the HTML5 `<progress>` element.",
      "jsDoc": "/**\n * A custom element similar to the HTML5 `<progress>` element.\n *\n * @element progress-bar\n *\n * @cssprop --progress-bar-fill-color - Color of the filled progress bar part.\n * @cssprop --progress-bar-opacity - Opacity set on the underlying track.\n *\n * @csspart bar - A progress bar background.\n * @csspart value - A progress bar foreground.\n */",
      "attributes": [
        {
          "name": "value",
          "description": "Current progress value.",
          "jsDoc": "/**\n   * Current progress value.\n   */",
          "type": "number"
        },
        {
          "name": "min",
          "description": "Minimum bound of the progress bar.",
          "jsDoc": "/**\n   * Minimum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum bound of the progress bar.",
          "jsDoc": "/**\n   * Maximum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "indeterminate",
          "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
          "jsDoc": "/**\n   * Indeterminate state of the progress bar.\n   * This property takes precedence over other state properties (min, max, value).\n   */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "Current progress value.",
          "jsDoc": "/**\n   * Current progress value.\n   */",
          "type": "number"
        },
        {
          "name": "min",
          "description": "Minimum bound of the progress bar.",
          "jsDoc": "/**\n   * Minimum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum bound of the progress bar.",
          "jsDoc": "/**\n   * Maximum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "indeterminate",
          "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
          "jsDoc": "/**\n   * Indeterminate state of the progress bar.\n   * This property takes precedence over other state properties (min, max, value).\n   */",
          "type": "boolean"
        }
      ],
      "cssProperties": [
        {
          "name": "--progress-bar-opacity",
          "description": "Opacity set on the underlying track."
        },
        {
          "name": "--progress-bar-fill-color",
          "description": "Color of the filled progress bar part."
        }
      ],
      "cssParts": [
        {
          "name": "value",
          "description": "A progress bar foreground."
        },
        {
          "name": "bar",
          "description": "A progress bar background."
        }
      ]
    }
  ]
}