{
  "version": 2,
  "tags": [
    {
      "name": "expansion-panel",
      "description": "A custom element similar to the HTML5 `<details>` element.",
      "jsDoc": "/**\n * A custom element similar to the HTML5 `<details>` element.\n *\n * @element expansion-panel\n *\n * @slot - Slot fot panel content\n * @slot header - Slot for panel header\n *\n * @fires opened-changed - Event fired when expanding / collapsing\n */",
      "attributes": [
        {
          "name": "opened",
          "description": "When true, the panel content is expanded and visible",
          "jsDoc": "/**\n   * When true, the panel content is expanded and visible\n   */",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "Disabled panel can not be expanded or collapsed",
          "jsDoc": "/**\n   * Disabled panel can not be expanded or collapsed\n   */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "opened",
          "description": "When true, the panel content is expanded and visible",
          "jsDoc": "/**\n   * When true, the panel content is expanded and visible\n   */",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "Disabled panel can not be expanded or collapsed",
          "jsDoc": "/**\n   * Disabled panel can not be expanded or collapsed\n   */",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "opened-changed",
          "description": "Event fired when expanding / collapsing"
        }
      ],
      "slots": [
        {
          "name": "header",
          "description": "Slot for panel header"
        },
        {
          "name": "",
          "description": "Slot fot panel content"
        }
      ]
    },
    {
      "name": "input-wrapper",
      "description": "A custom element wrapping `<input>` with `<label>` and extra slots.",
      "jsDoc": "/**\n * A custom element wrapping `<input>` with `<label>` and extra slots.\n *\n * @element input-wrapper\n *\n * @fires change - Event fired on value change (blur)\n * @fires input - Event fired on user input (key)\n *\n * @slot prefix - Slot for prefix content\n * @slot suffix - Slot for suffix content\n * @slot helper - Slot for helper content\n *\n * @attr {boolean} has-value - State attribute set when element has value\n * @attr {boolean} has-label - State attribute set when element has label\n */",
      "attributes": [
        {
          "name": "has-value",
          "description": "State attribute set when element has value",
          "type": "boolean"
        },
        {
          "name": "has-label",
          "description": "State attribute set when element has label",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "Disabled element can not be clicked",
          "jsDoc": "/**\n   * Disabled element can not be clicked\n   */",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Text content to show in the `<label>` element.",
          "jsDoc": "/**\n   * Text content to show in the `<label>` element.\n   */",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "description": "Value to set on the wrapped `<input>` element.",
          "jsDoc": "/**\n   * Value to set on the wrapped `<input>` element.\n   */",
          "type": "string"
        },
        {
          "name": "helper",
          "description": "Helper text to show below the input.",
          "jsDoc": "/**\n   * Helper text to show below the input.\n   */",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "disabled",
          "description": "Disabled element can not be clicked",
          "jsDoc": "/**\n   * Disabled element can not be clicked\n   */",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Text content to show in the `<label>` element.",
          "jsDoc": "/**\n   * Text content to show in the `<label>` element.\n   */",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "description": "Value to set on the wrapped `<input>` element.",
          "jsDoc": "/**\n   * Value to set on the wrapped `<input>` element.\n   */",
          "type": "string"
        },
        {
          "name": "helper",
          "description": "Helper text to show below the input.",
          "jsDoc": "/**\n   * Helper text to show below the input.\n   */",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "Event fired on value change (blur)"
        },
        {
          "name": "input",
          "description": "Event fired on user input (key)"
        }
      ],
      "slots": [
        {
          "name": "helper",
          "description": "Slot for helper content"
        },
        {
          "name": "suffix",
          "description": "Slot for suffix content"
        },
        {
          "name": "prefix",
          "description": "Slot for prefix content"
        }
      ]
    },
    {
      "name": "progress-bar",
      "description": "A custom element similar to the HTML5 `<progress>` element.",
      "jsDoc": "/**\n * A custom element similar to the HTML5 `<progress>` element.\n *\n * @element progress-bar\n */",
      "attributes": [
        {
          "name": "value",
          "description": "Current progress value.",
          "jsDoc": "/**\n   * Current progress value.\n   */",
          "type": "number"
        },
        {
          "name": "min",
          "description": "Minimum bound of the progress bar.",
          "jsDoc": "/**\n   * Minimum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum bound of the progress bar.",
          "jsDoc": "/**\n   * Maximum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "indeterminate",
          "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
          "jsDoc": "/**\n   * Indeterminate state of the progress bar.\n   * This property takes precedence over other state properties (min, max, value).\n   */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "value",
          "description": "Current progress value.",
          "jsDoc": "/**\n   * Current progress value.\n   */",
          "type": "number"
        },
        {
          "name": "min",
          "description": "Minimum bound of the progress bar.",
          "jsDoc": "/**\n   * Minimum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum bound of the progress bar.",
          "jsDoc": "/**\n   * Maximum bound of the progress bar.\n   */",
          "type": "number"
        },
        {
          "name": "indeterminate",
          "description": "Indeterminate state of the progress bar.\nThis property takes precedence over other state properties (min, max, value).",
          "jsDoc": "/**\n   * Indeterminate state of the progress bar.\n   * This property takes precedence over other state properties (min, max, value).\n   */",
          "type": "boolean"
        }
      ],
      "events": [],
      "slots": []
    }
  ]
}